# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

type GroupingItem {
    _id: String!
    correct: String!
    createdAt: DateTime!
    deletedAt: DateTime
    groups: [String!]!
    item: String!
    updatedAt: DateTime!
}

type GroupingItem2 {
    _id: String!
    correct: [String!]!
    createdAt: DateTime!
    deletedAt: DateTime
    groups: [String!]!
    item: [String!]!
    category: String!
    updatedAt: DateTime!
}

type HangmanWord {
    _id: String!
    category: String!
    createdAt: DateTime!
    deletedAt: DateTime
    updatedAt: DateTime!
    word: String!
}

type MirrorWord {
    _id: String!
    createdAt: DateTime!
    deletedAt: DateTime
    updatedAt: DateTime!
    word: String!
}

type Mutation {
    createGroupingItem(createGroupingItemData: CreateGroupingItemInput!): GroupingItem!
    createGroupingItem2(createGroupingItem2Data: CreateGroupingItem2Input!): GroupingItem2!
    createHangmanWord(createHangmanWordData: CreateHangmanWordInput!): HangmanWord!
    createManyPuzzles(data: PuzzleUrlInput!): [Puzzle]!
    createManyQuizAnswers(createQuizAnswerData: CreateManyQuizAnswersInput!): [QuizAnswer!]
    createMirrorWord(createMirrorWordData: CreateMirrorWordInput!): MirrorWord!
    createPuzzle(createPuzzleData: CreatePuzzleInput!): Puzzle!
    createQuiz(createQuizData: CreateQuizInput!): Quiz!
    createQuizAnswer(createQuizAnswerData: CreateQuizAnswerInput!): QuizAnswer!
    createQuizAnswerOption(createQuizAnswerOptionData: CreateQuizAnswerOptionInput!): QuizAnswerOption!
    createRole(createRoleData: CreateRoleInput!): Role!
    createSchool(createSchoolData: CreateSchoolInput!): School!
    createToken(createTokenData: CreateTokenInput!): Token!
    createUser(createUserData: CreateUserInput!): User!
    deleteGroupingItem(deleteGroupingItemData: DeleteGroupingItemInput!): GroupingItem!
    deleteGroupingItem2(deleteGroupingItem2Data: DeleteGroupingItem2Input!): GroupingItem2!
    deleteHangmanWord(deleteHangmanWordData: DeleteHangmanWordInput!): HangmanWord!
    deleteMirrorWord(deleteMirrorWordData: DeleteMirrorWordInput!): MirrorWord!
    deletePuzzle(deletePuzzleData: DeletePuzzleInput!): Puzzle!
    deleteQuiz(deleteQuizData: DeleteQuizInput!): Quiz!
    deleteQuizAnswer(deleteQuizAnswerData: DeleteQuizAnswerInput!): QuizAnswer!
    deleteQuizAnswerOption(deleteQuizAnswerOptionData: DeleteQuizAnswerOptionInput!): QuizAnswerOption!
    deleteRole(deleteRoleData: DeleteRoleInput!): Role!
    deleteSchool(deleteSchoolData: DeleteSchoolInput!): School!
    deleteToken(deleteTokenData: DeleteTokenInput!): Token!
    deleteUser(deleteUserData: DeleteUserInput!): User!
    updateGroupingItem(updateGroupingItemData: UpdateGroupingItemInput!): GroupingItem!
    updateGroupingItem2(updateGroupingItem2Data: UpdateGroupingItem2Input!): GroupingItem2!
    updateHangmanWord(updateHangmanWordData: UpdateHangmanWordInput!): HangmanWord!
    updateMirrorWord(updateMirrorWordData: UpdateMirrorWordInput!): MirrorWord!
    updatePuzzle(updatePuzzleData: UpdatePuzzleInput!): Puzzle!
    updateQuiz(updateQuizData: UpdateQuizInput!): Quiz!
    updateQuizAnswer(updateQuizAnswerData: UpdateQuizAnswerInput!): QuizAnswer!
    updateQuizAnswerOption(updateQuizAnswerOptionData: UpdateQuizAnswerOptionInput!): QuizAnswerOption!
    updateRole(updateRoleData: UpdateRoleInput!): Role!
    updateSchool(updateSchoolData: UpdateSchoolInput!): School!
    updateUser(updateUserData: UpdateUserInput!): User!
}

type Puzzle {
    _id: String!
    columns: Float
    createdAt: DateTime!
    cropHeight: Float
    cropLeft: Float
    cropTop: Float
    cropWidth: Float
    deletedAt: DateTime
    pieceSize: Float
    updatedAt: DateTime!
    url: String!
}

type Query {
    groupingItem(id: String): GroupingItem
    groupingItems(ids: [String!]): [GroupingItem]!
    groupingItem2(category: String, id: String): GroupingItem2
    groupingItems2(category: String, ids: [String!]): [GroupingItem2]!
    "Get a hangman word randomly"
    hangmanWord(category: String, id: String): HangmanWord
    hangmanWords(category: String, ids: [String!]): [HangmanWord]!
    mirrorWord(id: String): MirrorWord
    mirrorWords(ids: [String!]): [MirrorWord]!
    profile: User
    puzzle(id: String!): Puzzle
    puzzles(ids: [String!]): [Puzzle]!
    quiz(id: String!): Quiz
    quizAnswer(id: String!): QuizAnswer
    quizAnswerOption(id: String!): QuizAnswerOption
    quizAnswerOptions(ids: [String!]): [QuizAnswerOption]!
    quizAnswers(ids: [String!], quizId: String, token: String): [QuizAnswer]!
    quizzes(category: String, ids: [String!]): [Quiz]!
    role(id: String!): Role
    roles(ids: [String!]): [Role]!
    school(id: String!): School
    schools(address: String, county: String, ids: [String!], name: String, om: String, type: String): [School]!
    token(id: String, token: String!): Token
    tokens(ids: [String!]): [Token]!
    uptime: Float!
    user(email: String, id: String): User
    users(ids: [String!]): [User]!
}

type Quiz {
    _id: String!
    categories: [String!]!
    createdAt: DateTime!
    deletedAt: DateTime
    description: String!
    questions: [QuizQuestion!]!
    template: String!
    title: String!
    tokens: [String!]!
    updatedAt: DateTime!
}

type QuizAnswer {
    _id: String!
    answer: String!
    answeredAt: DateTime!
    createdAt: DateTime!
    deletedAt: DateTime
    isCorrect: Boolean
    om: String!
    questionId: Int!
    quizId: String!
    token: String
    updatedAt: DateTime!
}

type QuizAnswerOption {
    _id: Int!
    categoryIndex: Float
    createdAt: DateTime!
    deletedAt: DateTime
    isCorrect: Boolean
    text: String!
    updatedAt: DateTime!
}

type QuizQuestion {
    _id: Int!
    answers: [QuizAnswerOption]
    categoryIndex: Int
    createdAt: DateTime!
    deletedAt: DateTime
    question: String!
    type: String!
    updatedAt: DateTime!
}

type Role {
    _id: String!
    createdAt: DateTime!
    deletedAt: DateTime
    description: String!
    name: String!
    permissions: [String!]!
    updatedAt: DateTime!
}

type School {
    _id: String!
    address: String!
    county: String!
    createdAt: DateTime!
    deletedAt: DateTime
    name: String!
    om: String!
    types: [String!]!
    updatedAt: DateTime!
}

type Token {
    _id: String!
    createdAt: DateTime!
    deletedAt: DateTime
    expiresAt: DateTime!
    quiz: Quiz!
    token: String!
    updatedAt: DateTime!
}

type User {
    _id: String!
    createdAt: DateTime!
    deletedAt: DateTime
    email: String!
    om: String
    roles: [Role]
    updatedAt: DateTime!
    username: String!
}

"A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format."
scalar DateTime

input CreateGroupingItemInput {
    correct: String!
    groups: [String!]!
    item: String!
}

input CreateGroupingItem2Input {
    correct: [String!]!
    groups: [String!]!
    item: [String!]!
    category: String!
}

input CreateHangmanWordInput {
    category: String!
    word: String!
}

input CreateManyQuizAnswersInput {
    answers: [CreateQuizAnswerInput!]!
}

input CreateMirrorWordInput {
    word: String!
}

input CreatePuzzleInput {
    columns: Float!
    cropHeight: Float!
    cropLeft: Float!
    cropTop: Float!
    cropWidth: Float!
    pieceSize: Float!
    url: String!
}

input CreateQuizAnswerInput {
    answer: String!
    answeredAt: DateTime!
    isCorrect: Boolean
    om: String!
    questionId: Int!
    quizId: String!
    token: String
}

input CreateQuizAnswerOptionInput {
    _id: Float
    categoryIndex: Float
    isCorrect: Boolean
    text: String!
}

input CreateQuizInput {
    categories: [String!]!
    description: String!
    questions: [CreateQuizQuestionInput!]!
    template: String!
    title: String!
}

input CreateQuizQuestionInput {
    _id: Float!
    answers: [CreateQuizAnswerOptionInput]
    categoryIndex: Float
    question: String!
    type: String!
}

input CreateRoleInput {
    description: String!
    name: String!
    permissions: [String!]!
}

input CreateSchoolInput {
    address: String!
    county: String!
    name: String!
    om: String!
    types: [String!]!
}

input CreateTokenInput {
    "The token lifetime in seconds"
    expiresIn: Int
    quizId: String!
}

input CreateUserInput {
    email: String!
    om: String
    password: String!
    roles: [String]
    username: String!
}

input DeleteGroupingItemInput {
    id: String!
}

input DeleteGroupingItem2Input {
    id: String!
}

input DeleteHangmanWordInput {
    id: String!
}

input DeleteMirrorWordInput {
    id: String!
}

input DeletePuzzleInput {
    id: String!
}

input DeleteQuizAnswerInput {
    id: String!
}

input DeleteQuizAnswerOptionInput {
    id: String!
}

input DeleteQuizInput {
    id: String!
}

input DeleteRoleInput {
    id: String!
}

input DeleteSchoolInput {
    id: String!
}

input DeleteTokenInput {
    id: String!
}

input DeleteUserInput {
    id: String!
}

input PuzzleUrlInput {
    urls: [String!]!
}

input UpdateGroupingItemInput {
    correct: String
    groups: [String]
    id: String!
    item: String
}

input UpdateGroupingItem2Input {
    correct: [String]
    groups: [String]
    id: String!
    item: [String]
    category: String
}

input UpdateHangmanWordInput {
    category: String
    id: String!
    word: String
}

input UpdateMirrorWordInput {
    id: String!
    word: String!
}

input UpdatePuzzleInput {
    columns: Float
    cropHeight: Float
    cropLeft: Float
    cropTop: Float
    cropWidth: Float
    id: String!
    pieceSize: Float
    url: String!
}

input UpdateQuizAnswerInput {
    answer: String
    answeredAt: DateTime
    id: String!
    om: String
    questionId: Int
    quizId: String
}

input UpdateQuizAnswerOptionInput {
    _id: Float
    categoryIndex: Float
    isCorrect: Boolean
    text: String
}

input UpdateQuizInput {
    categories: [String]
    description: String
    id: String!
    questions: [UpdateQuizQuestionInput]
    title: String
}

input UpdateQuizQuestionInput {
    _id: Float
    answers: [UpdateQuizAnswerOptionInput]
    categoryIndex: Float
    question: String
    type: String
}

input UpdateRoleInput {
    description: String
    id: String!
    name: String
    permissions: [String]
}

input UpdateSchoolInput {
    address: String
    county: String
    id: String!
    name: String
    om: String
    types: [String]
}

input UpdateUserInput {
    email: String
    id: String
    newPassword: String
    newPasswordConfirm: String
    om: String
    password: String!
    roles: [String]
    username: String
}
